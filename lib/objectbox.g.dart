// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'model/word.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1),
      name: 'Word',
      lastPropertyId: const IdUid(7, 7690913918601784105),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8246024000468252730),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1933101338332134448),
            name: 'langId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2245466148711448707),
            name: 'letter',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4737207353756559193),
            name: 'wordId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7231270088001517744),
            name: 'word',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6985924929833847872),
            name: 'lword',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7690913918601784105),
            name: 'lwordMask',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 1),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [6340663483916346837],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        469393349394600467,
        6468022653824554886,
        4251876405332875370,
        962416795588697287,
        1446233554302581116,
        6725053102633110456,
        5056786493163352175
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Word: EntityDefinition<Word>(
        model: _entities[0],
        toOneRelations: (Word object) => [],
        toManyRelations: (Word object) => {},
        getId: (Word object) => object.id,
        setId: (Word object, int id) {
          object.id = id;
        },
        objectToFB: (Word object, fb.Builder fbb) {
          final letterOffset = fbb.writeString(object.letter);
          final wordOffset = fbb.writeString(object.word);
          final lwordOffset = fbb.writeString(object.lword);
          final lwordMaskOffset = object.lwordMask == null
              ? null
              : fbb.writeString(object.lwordMask!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.langId);
          fbb.addOffset(2, letterOffset);
          fbb.addInt64(3, object.wordId);
          fbb.addOffset(4, wordOffset);
          fbb.addOffset(5, lwordOffset);
          fbb.addOffset(6, lwordMaskOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Word(
              langId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              letter: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              wordId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              word: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              lword: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              lwordMask: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Word] entity fields to define ObjectBox queries.
class Word_ {
  /// see [Word.id]
  static final id = QueryIntegerProperty<Word>(_entities[0].properties[0]);

  /// see [Word.langId]
  static final langId = QueryIntegerProperty<Word>(_entities[0].properties[1]);

  /// see [Word.letter]
  static final letter = QueryStringProperty<Word>(_entities[0].properties[2]);

  /// see [Word.wordId]
  static final wordId = QueryIntegerProperty<Word>(_entities[0].properties[3]);

  /// see [Word.word]
  static final word = QueryStringProperty<Word>(_entities[0].properties[4]);

  /// see [Word.lword]
  static final lword = QueryStringProperty<Word>(_entities[0].properties[5]);

  /// see [Word.lwordMask]
  static final lwordMask =
      QueryStringProperty<Word>(_entities[0].properties[6]);
}
